import json
import traceback
import requests
import os
import google.generativeai as genai  # Needed for Gemini API
# You might need a specific library for your Git service, e.g., PyGithub

# --- Configuration for Git API (GitHub) ---
# IMPORTANT: Replace with your actual Git service details
GIT_HOST_API_BASE_URL = os.getenv("GIT_HOST_API_BASE_URL", "https://api.github.com")  # GitHub REST API v3
GIT_REPO_OWNER = os.getenv("GIT_REPO_OWNER")  # The owner of the repository (e.g., "your-org")
GIT_REPO_NAME = os.getenv("GIT_REPO_NAME")  # The name of the repository (e.g., "your-repo")
GIT_API_TOKEN = os.getenv("GIT_API_TOKEN")  # GitHub Personal Access Token

# IMPORTANT: Configure your authentication headers for GitHub
GITHUB_HEADERS = {
    "Accept": "application/vnd.github.v3+json",
    "Authorization": f"token {GIT_API_TOKEN}" if GIT_API_TOKEN else None,  # Use token if available
    "X-GitHub-Api-Version": "2022-11-28"  # Recommended API version header
}

# --- Configuration for LLM (Gemini API) ---
GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")

# Configure the Gemini API client
if GEMINI_API_KEY:
    try:
        genai.configure(api_key=GEMINI_API_KEY)
        # Optional: Check available models or do a test call if needed
        # for m in genai.list_models():
        #     print(m.name)
    except Exception as e:
        print(f"[❌] Error configuring Gemini API: {e}")
        # Handle configuration error, e.g., set GEMINI_API_KEY to None
        GEMINI_API_KEY = None
else:
    print("[❌] Warning: GEMINI_API_KEY environment variable is not set. PR body will not be generated by Gemini.")

# --- Helper function to generate PR body using Gemini ---
def generate_pr_body_with_gemini(issue_id: str, code_diff: str, diagnosis_details: dict, validation_results: dict) -> str:
    """
    Generates a professional PR body using the Gemini API.
    """
    if not GEMINI_API_KEY:
        return "LLM configuration missing. PR body generated from template."

    # Initialize the Generative Model
    try:
        model = genai.GenerativeModel('gemini-1.5-flash-latest')  # Replace with your preferred Gemini model
    except Exception as e:
        return f"[❌] Error initializing Gemini model: {e}"

    # Prompt construction
    prompt = f"""
    You are an AI assistant tasked with writing a professional and concise Pull Request description based on a bug fix and its validation.

    Use the following information:

    Issue ID: {issue_id}

    The following references were attached as context:

    The user is currently located in a GitHub repository, but possibly a sub-directory of that GitHub repository. Their current URL can tell you specifically, but included is some information about the repository:
    repo: discoversoftwaresolutions/DebugIQ-backend
    repo ID: 981398754
    The language composition of this repo is [{"name":"Python","percent":99.5},{"name":"Dockerfile","percent":0.5}].
    """

    # Ensure all variables (diagnosis_details, validation_results, code_diff) are defined and contain valid data
    diagnosis_summary = diagnosis_details.get('summary', 'N/A')
    validation_summary = validation_results.get('summary', 'N/A')
    code_changes = code_diff if code_diff else "No changes available."

    # Print the formatted results
    print("Diagnosis Summary:")
    print(diagnosis_summary)

    print("\nValidation Results:")
    print(validation_summary)

    print("\nCode Changes (Unified Diff Format):")
    print(code_changes)

    # Return a basic PR body for now (can be enhanced to call the Gemini model)
    return f"""
    ## Pull Request Description

    **Issue ID:** {issue_id}

    ### Diagnosis Summary:
    {diagnosis_summary}

    ### Validation Results:
    {validation_summary}

    ### Code Changes:
    {code_changes}
    """
