import json
import traceback
import httpx  # Import the asynchronous HTTP client
import os
import google.generativeai as genai
import base64
import logging
import datetime

# Setup logger for this module
logger = logging.getLogger(__name__)

# --- Configuration ---
# IMPORTANT: Set these environment variables in your Railway service settings.
GIT_HOST_API_BASE_URL = os.getenv("GIT_HOST_API_BASE_URL", "https://api.github.com")  # Default to GitHub REST API v3
GIT_REPO_OWNER = os.getenv("GIT_REPO_OWNER")  # The owner of the repository (e.g., "your-org")
GIT_REPO_NAME = os.getenv("GIT_REPO_NAME")  # The name of the repository (e.g., "your-repo")
GIT_API_TOKEN = os.getenv("GIT_API_TOKEN")  # GitHub Personal Access Token (PAT) or equivalent
GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")  # API key for Google Gemini
DEFAULT_BASE_BRANCH = os.getenv("DEFAULT_BASE_BRANCH", "main")  # Branch to base new fix branches on

# Define standard headers for GitHub API requests (adjust if using a different Git host)
# Ensure token is available before formatting Authorization header
GITHUB_HEADERS = {
    "Accept": "application/vnd.github.v3+json",
    "Authorization": f"token {GIT_API_TOKEN}" if GIT_API_TOKEN else None,
    "X-GitHub-Api-Version": "2022-11-28",
    "Content-Type": "application/json",  # Often needed for POST/PATCH requests
}

# Check for required Git environment variables
if not all([GIT_REPO_OWNER, GIT_REPO_NAME, GIT_API_TOKEN]):
    logger.error(
        "Missing one or more required Git environment variables (GIT_REPO_OWNER, GIT_REPO_NAME, GIT_API_TOKEN). "
        "Pull request creation will not work."
    )
    GIT_API_TOKEN = None  # Disable authenticated calls if token is missing
    # Consider raising a more critical error here if PR creation is essential for startup

# Configure Gemini API client (assuming this configuration is sufficient globally)
if GEMINI_API_KEY:
    try:
        genai.configure(api_key=GEMINI_API_KEY)
        logger.info("Gemini API configured successfully.")
    except Exception as e:
        logger.error(f"Error configuring Gemini API: {e}", exc_info=True)
        GEMINI_API_KEY = None
else:
    logger.warning("GEMINI_API_KEY environment variable is not set. PR body will not be generated by Gemini.")


# --- Helper function to generate PR body using Gemini (already async) ---
async def generate_pr_body_with_gemini(issue_id: str, code_diff: str, diagnosis_details: dict, validation_results: dict) -> str:
    """
    Generates a professional PR body using the Gemini API.

    Args:
        issue_id (str): The ID of the issue.
        code_diff (str): The patch in diff format.
        diagnosis_details (dict): Details from the diagnosis step.
        validation_results (dict): Results from the validation step.

    Returns:
        str: The generated PR body text, or an error message indicating failure.
    """
    if not GEMINI_API_KEY:
        logger.warning("Gemini API key missing, using fallback PR body template.")
        # Fallback template matching the expected structure
        diagnosis_summary = diagnosis_details.get('summary', 'N/A')
        validation_summary = validation_results.get('summary', 'N/A')
        code_changes = code_diff if code_diff else "No changes available."
        return f"""
## DebugIQ Automated Pull Request

**Issue ID:** {issue_id}

### Diagnosis Summary:
{diagnosis_summary}

### Validation Results:
{validation_summary}

### Code Changes:
```diff
{code_changes}
