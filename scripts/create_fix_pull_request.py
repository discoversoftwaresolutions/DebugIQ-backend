import json
import traceback
import requests
import os
import google.generativeai as genai  # Needed for Gemini API
import base64  # Needed if creating blobs from raw file content (Git Database API)

# --- Configuration ---
# IMPORTANT: Set these environment variables in your Railway service settings.
GIT_HOST_API_BASE_URL = os.getenv("GIT_HOST_API_BASE_URL", "https://api.github.com")  # GitHub REST API v3
GIT_REPO_OWNER = os.getenv("GIT_REPO_OWNER")  # The owner of the repository (e.g., "your-org")
GIT_REPO_NAME = os.getenv("GIT_REPO_NAME")  # The name of the repository (e.g., "your-repo")
GIT_API_TOKEN = os.getenv("GIT_API_TOKEN")  # GitHub Personal Access Token (PAT)
GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")
DEFAULT_BASE_BRANCH = os.getenv("DEFAULT_BASE_BRANCH", "main")  # Branch to base new fix branches on

GITHUB_HEADERS = {
    "Accept": "application/vnd.github.v3+json",
    "Authorization": f"token {GIT_API_TOKEN}" if GIT_API_TOKEN else None,
    "X-GitHub-Api-Version": "2022-11-28",
}

# Configure Gemini API client
if GEMINI_API_KEY:
    try:
        genai.configure(api_key=GEMINI_API_KEY)
        # Optional: Check available models or do a test call if needed
        # for m in genai.list_models(): print(m.name)
    except Exception as e:
        print(f"[❌] Error configuring Gemini API: {e}")
        GEMINI_API_KEY = None
else:
    print("[❌] Warning: GEMINI_API_KEY environment variable is not set. PR body will not be generated by Gemini.")


import json
import traceback
import requests
import os
import google.generativeai as genai  # Needed for Gemini API
import base64  # Needed if creating blobs from raw file content (Git Database API)

# --- Configuration ---
# IMPORTANT: Set these environment variables in your Railway service settings.
GIT_HOST_API_BASE_URL = os.getenv("GIT_HOST_API_BASE_URL", "https://api.github.com")  # GitHub REST API v3
GIT_REPO_OWNER = os.getenv("GIT_REPO_OWNER")  # The owner of the repository (e.g., "your-org")
GIT_REPO_NAME = os.getenv("GIT_REPO_NAME")  # The name of the repository (e.g., "your-repo")
GIT_API_TOKEN = os.getenv("GIT_API_TOKEN")  # GitHub Personal Access Token (PAT)
GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")
DEFAULT_BASE_BRANCH = os.getenv("DEFAULT_BASE_BRANCH", "main")  # Branch to base new fix branches on

GITHUB_HEADERS = {
    "Accept": "application/vnd.github.v3+json",
    "Authorization": f"token {GIT_API_TOKEN}" if GIT_API_TOKEN else None,
    "X-GitHub-Api-Version": "2022-11-28",
}

# Configure Gemini API client
if GEMINI_API_KEY:
    try:
        genai.configure(api_key=GEMINI_API_KEY)
        # Optional: Check available models or do a test call if needed
        # for m in genai.list_models(): print(m.name)
    except Exception as e:
        print(f"[❌] Error configuring Gemini API: {e}")
        GEMINI_API_KEY = None
else:
    print("[❌] Warning: GEMINI_API_KEY environment variable is not set. PR body will not be generated by Gemini.")


# --- Helper function to generate PR body using Gemini ---
async def generate_pr_body_with_gemini(issue_id: str, code_diff: str, diagnosis_details: dict, validation_results: dict) -> str:
    """
    Generates a professional PR body using the Gemini API.
    Made async to be consistent with potential async API calls.
    """
    if not GEMINI_API_KEY:
        return "LLM configuration missing. PR body generated from template."

    try:
    model = genai.GenerativeModel('gemini-1.5-flash-latest')  # Or your preferred Gemini model

    # Fixed the syntax issue by properly closing the triple quotes for the prompt
    prompt = f"""
You are an AI assistant tasked with writing a professional and concise Pull Request description based on a bug fix and its validation.

Use the following information:

Issue ID: {issue_id}

Diagnosis Summary:
{diagnosis_details.get('summary', 'N/A')}

Validation Results:
{validation_results.get('summary', 'N/A')}

"""
    response = await model.generate_text(prompt=prompt)
    return response.text.strip()

except Exception as e:
    traceback.print_exc()
    return f"Error generating PR body: {e}"       
