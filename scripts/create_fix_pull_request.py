import json
import traceback
import httpx
import os
import google.generativeai as genai
import base64
import logging
from datetime import datetime

logger = logging.getLogger(__name__)

GIT_HOST_API_BASE_URL = os.getenv("GIT_HOST_API_BASE_URL", "https://api.github.com")
GIT_REPO_OWNER = os.getenv("GIT_REPO_OWNER")
GIT_REPO_NAME = os.getenv("GIT_REPO_NAME")
GITHUB_DISPATCH_TOKEN = os.getenv("GITHUB_DISPATCH_TOKEN")
GITHUB_PR_WORKFLOW_FILENAME = os.getenv("GITHUB_PR_WORKFLOW_FILENAME")
GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")
DEFAULT_BASE_BRANCH = os.getenv("DEFAULT_BASE_BRANCH", "main")

GITHUB_HEADERS = {
    "Accept": "application/vnd.github.h3+json",
    "Authorization": f"token {os.getenv('GIT_API_TOKEN')}",
    "X-GitHub-Api-Version": "2022-11-28",
    "Content-Type": "application/json",
}

if not all([GIT_REPO_OWNER, GIT_REPO_NAME, GITHUB_DISPATCH_TOKEN, GITHUB_PR_WORKFLOW_FILENAME]):
    logger.error("Missing one or more required Git environment variables needed for Workflow Dispatch. PR creation workflow triggering will not work.")

if GEMINI_API_KEY:
    try:
        genai.configure(api_key=GEMINI_API_KEY)
        logger.info("Gemini API configured successfully.")
    except Exception as e:
        logger.error(f"Error configuring Gemini API: {e}", exc_info=True)
        GEMINI_API_KEY = None
else:
    logger.warning("GEMINI_API_KEY environment variable is not set. PR body will not be generated by Gemini.")

async def generate_pr_body_with_gemini(issue_id: str, code_diff: str, diagnosis_details: dict, validation_results: dict) -> str:
    if not GEMINI_API_KEY:
        logger.warning("Gemini API key missing, using fallback PR body template.")
        diagnosis_summary = diagnosis_details.get('summary', 'N/A')
        validation_summary = validation_results.get('summary', 'N/A')
        return f"""## DebugIQ Automated Pull Request\n**Issue ID:** {issue_id}\n\n### Diagnosis Summary:\n{diagnosis_summary}\n\n### Validation Results:\n{validation_summary}\n\n### Code Changes:\n```diff\n{code_diff}\n```"""
    try:
        response = genai.generate_text(
            prompt=f"Generate a pull request body for issue {issue_id} with the following details: diagnosis: {diagnosis_details}, validation: {validation_results}, code diff: {code_diff}"
        )
        if hasattr(response, 'text') and response.text:
            return response.text.strip()
        elif hasattr(response, 'prompt_feedback') and response.prompt_feedback.block_reason:
            block_reason = response.prompt_feedback.block_reason
            return f"AI PR body generation blocked by safety policy (Reason: {block_reason})."
        else:
            return "Gemini generated no text for the PR body. Please write it manually."
    except Exception as e:
        logger.error(f"Error generating PR body with Gemini: {e}", exc_info=True)
        return f"Error generating PR body with AI: {e}. Please write it manually."

async def trigger_pr_creation_workflow(issue_id: str, patch_diff: str, diagnosis_details: dict, validation_results: dict) -> dict:
    if not all([GIT_REPO_OWNER, GIT_REPO_NAME, GITHUB_DISPATCH_TOKEN, GITHUB_PR_WORKFLOW_FILENAME]):
        error_msg = "GitHub Actions Workflow Dispatch configuration missing."
        logger.error(error_msg)
        return {"workflow_url": None, "message": error_msg, "error": error_msg}
    repo_owner = diagnosis_details.get('repository_owner') or GIT_REPO_OWNER
    repo_name = diagnosis_details.get('repository_name') or GIT_REPO_NAME
    base_branch = diagnosis_details.get('base_branch') or DEFAULT_BASE_BRANCH
    pr_body = await generate_pr_body_with_gemini(issue_id, patch_diff, diagnosis_details, validation_results)
    dispatch_url = f"{GIT_HOST_API_BASE_URL}/repos/{repo_owner}/{repo_name}/actions/workflows/{GITHUB_PR_WORKFLOW_FILENAME}/dispatches"
    dispatch_payload = {
        "ref": base_branch,
        "inputs": {
            "issue_id": issue_id,
            "patch_diff": patch_diff,
            "pr_body": pr_body,
            "repo_owner": repo_owner,
            "repo_name": repo_name,
            "base_branch": base_branch,
            "diagnosis_summary": diagnosis_details.get('summary', 'N/A'),
            "validation_summary": validation_results.get('summary', 'N/A'),
            "validation_status": validation_results.get('status', 'Unknown'),
        }
    }
    dispatch_headers = {
        "Accept": "application/vnd.github.v3+json",
        "Authorization": f"token {GITHUB_DISPATCH_TOKEN}",
        "X-GitHub-Api-Version": "2022-11-28",
        "Content-Type": "application/json",
    }
    async with httpx.AsyncClient() as client:
        try:
            response_dispatch = await client.post(dispatch_url, headers=dispatch_headers, json=dispatch_payload)
            if response_dispatch.status_code == 204:
                workflow_runs_url = f"https://github.com/{repo_owner}/{repo_name}/actions/workflows/{GITHUB_PR_WORKFLOW_FILENAME}"
                return {
                    "workflow_url": workflow_runs_url,
                    "message": f"Workflow triggered successfully. Check {workflow_runs_url} for details.",
                    "error": None
                }
            else:
                error_msg = f"Unexpected status code {response_dispatch.status_code}."
                return {"workflow_url": None, "message": error_msg, "error": error_msg}
        except Exception as e:
            logger.error(f"Error triggering workflow: {e}", exc_info=True)
            return {"workflow_url": None, "message": f"Error: {e}", "error": str(e)}
